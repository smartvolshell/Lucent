一、MongoDB 自带 Profiler，可以非常方便地记录下所有耗时过长操作，以便于调优。类似于MySQL的slow log, MongoDB可以监控所有慢的以及不慢的查询
db.setProfilingLevel(n)  
n:   
   0: Off;   
   1: Log Slow Operations;   
   2: Log All Operations.s
   通常我们只关心 Slow Operation，Level 1 默认记录 >100ms 的操作，当然我们也可以自己调整 "db.setProfilingLevel(2, 300)"
Profiler 信息保存在 system.profile (Capped Collection) 中。
s
1、准备1000000 条数据
def insertValues(temp):
    for i in range(1000000):
        user = {
                'name':'admin' + str(i),
                'age':randint(10,90)
                }
        temp.insert(user)


2、开启调优  db.setProfilingLevel(1)
3、做一次耗时的查询。db.users.find().sort({age:-1}).limit(10000)
4、查看操作的统计信息
	db.system.profile.find()	
	    •ts: 操作执行时间。
	    •info: 操作详细信息。
	    •info.query: 查询目标(数据库.集合)。
	    •info.ntoreturn: 客户端期望返回的文档数量。
	    •info.nscanned: 服务器实际扫描的文档数量。
	    •info.reslen: 查询结果字节长度。
	    •info.nreturnned: 查询返回文档数。
	    •millis: 操作耗时(毫秒)。
5、使用用 explain() 看看服务器如何执行执行该命令。
	db.users.find().sort({age:-1}).limit(10000).explain()
	没有建立索引是非常耗时的。建立索引再次执行上述操作


二. Optimization

优化建议:

    •如果 nscanned 远大于 nreturned，那么需要使用索引。
    •如果 reslen 返回字节非常大，那么考虑只获取所需的字段。
    •执行 update 操作时同样检查一下 nscanned，并使用索引减少文档扫描数量。
    •使用 db.eval() 在服务端执行某些统计操作。
    •减少返回文档数量，使用 skip & limit 分页。



SON是由10gen开发的一个数据格式，目前主要用于MongoDB中，是MongoDB的数据存储格式。BSON基于JSON格式，选择JSON进行改造的原因主要是JSON的通用性及JSON的schemaless的特性。

BSON主要会实现以下三点目标：
1.更快的遍历速度

	对JSON格式来说，太大的JSON结构会导致数据遍历非常慢。在JSON中，要跳过一个文档进行数据读取，需要对此文档进行扫描才行，需要进行麻烦的数据结构匹配，比如括号的匹配，而BSON对JSON的一大改进就是，它会将JSON的每一个元素的长度存在元素的头部，这样你只需要读取到元素长度就能直接seek到指定的点上进行读取了。

	MongoDB优化：对于MongoDB来说，由于采用了【MMAP来做内存与数据文件的映射】，在更新或者获取Document的某一个字段时，如果需要先读取其前面的所有字段，会导致物理内存由于读操作被加载到不必要的字段上，导致资源的不合理分配。【而采用BSON只需要读到相应的位置然后跨过无用内容(seek)读取需要内容即可。】
2.操作更简易

	对JSON来说，数据存储是无类型的，比如你要修改基本一个值，从9到10，由于从一个字符变成了两个，所以可能其后面的所有内容都需要往后移一位才可以。而使用BSON，你可以指定这个列为数字列，那么无论数字从9长到10还是100，我们都只是在存储数字的那一位上进行修改，不会导致数据总长变大。当然，在MongoDB中，如果数字从整形增大到长整型，还是会导致数据总长变大的。

	MongoDB优化：所以使用MongoDB的一个技巧是【将长度可能变化的字段尽量命名靠后】（MongoDB在update操作后会将字段按key值按字母顺序重排，所以靠后的意思是按a－z的顺序取名）。这样在更新的时候如果导致数字变长，不需要移动大量数据。一个典型的例子是如果用二进制类型存储文件时，如果文件名或者文件描述可能会变长，那么尽量将这个字段取名靠后是一个明智的选择，否则在文件名或文件描述字段变化时，会导致移动很长的二进制数据，造成不必要的浪费。
3.增加了额外的数据类型

	JSON是一个很方便的数据交换格式，但是其类型比较有限。BSON在其基础上增加了“byte array”数据类型。这使得二进制的存储不再需要先base64转换后再存成JSON。大大减少了计算开销和数据大小。

	当然，在有的时候，BSON相对JSON来说也并没有空间上的优势，比如对{“field”:7}，在JSON的存储上7只使用了一个字节，而如果用BSON，那就是至少4个字节（32位）

	MongoDB优化：在MongoDB中，如果你的字段是数字型，并且涉及到数据加减操作的，那么建议存在int型，但如果是一个固定不变的数字，并且在四位以下的话，可以考虑存成字符串类型。这样会节省空间。

	目前在10gen的努力下，BSON已经有了针对多种语言的编码解码包。并且都是Apache 2 license下开源的。并且还在随着MongoDB进一步地发展。关于BSON，你可以在其官方网站 bsonspec.org 上获取更多信息。